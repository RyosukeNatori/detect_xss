<ref *1> [
  Inline {
    kind: 'inline',
    loc: Location { source: null, start: [Position], end: [Position] },
    value: '<html>\n  <body>\n    ',
    raw: '<html>\n  <body>\n    ',
    parent: Program {
      kind: 'program',
      loc: [Location],
      children: [Circular *1],
      errors: [],
      comments: []
    }
  },
  ExpressionStatement {
    kind: 'expressionstatement',
    loc: Location { source: null, start: [Position], end: [Position] },
    expression: Assign {
      kind: 'assign',
      loc: [Location],
      left: [Variable],
      right: [OffsetLookup],
      operator: '='
    },
    parent: Program {
      kind: 'program',
      loc: [Location],
      children: [Circular *1],
      errors: [],
      comments: []
    }
  },
  <ref *2> If {
    kind: 'if',
    loc: Location { source: null, start: [Position], end: [Position] },
    test: Variable {
      kind: 'variable',
      loc: [Location],
      name: 'query',
      curly: false,
      parent: [Circular *2]
    },
    body: Block {
      kind: 'block',
      loc: [Location],
      children: [Array],
      parent: [Circular *2]
    },
    alternate: null,
    shortForm: false,
    parent: Program {
      kind: 'program',
      loc: [Location],
      children: [Circular *1],
      errors: [],
      comments: []
    }
  },
  <ref *3> _Function {
    kind: 'function',
    loc: Location { source: null, start: [Position], end: [Position] },
    name: Identifier {
      kind: 'identifier',
      loc: [Location],
      name: 'echoHello'
    },
    arguments: [ [Parameter] ],
    byref: false,
    type: null,
    nullable: false,
    body: Block {
      kind: 'block',
      loc: [Location],
      children: [Array],
      parent: [Circular *3]
    },
    attrGroups: [],
    parent: Program {
      kind: 'program',
      loc: [Location],
      children: [Circular *1],
      errors: [],
      comments: []
    }
  },
  Inline {
    kind: 'inline',
    loc: Location { source: null, start: [Position], end: [Position] },
    value: '    <div></div>\n    ',
    raw: '\n    <div></div>\n    ',
    parent: Program {
      kind: 'program',
      loc: [Location],
      children: [Circular *1],
      errors: [],
      comments: []
    }
  },
  ExpressionStatement {
    kind: 'expressionstatement',
    loc: Location { source: null, start: [Position], end: [Position] },
    expression: Assign {
      kind: 'assign',
      loc: [Location],
      left: [Variable],
      right: [OffsetLookup],
      operator: '='
    },
    parent: Program {
      kind: 'program',
      loc: [Location],
      children: [Circular *1],
      errors: [],
      comments: []
    }
  },
  <ref *4> If {
    kind: 'if',
    loc: Location { source: null, start: [Position], end: [Position] },
    test: Variable {
      kind: 'variable',
      loc: [Location],
      name: 'query',
      curly: false,
      parent: [Circular *4]
    },
    body: Block {
      kind: 'block',
      loc: [Location],
      children: [Array],
      parent: [Circular *4]
    },
    alternate: null,
    shortForm: false,
    parent: Program {
      kind: 'program',
      loc: [Location],
      children: [Circular *1],
      errors: [],
      comments: []
    }
  },
  <ref *5> _Function {
    kind: 'function',
    loc: Location { source: null, start: [Position], end: [Position] },
    name: Identifier {
      kind: 'identifier',
      loc: [Location],
      name: 'echHello'
    },
    arguments: [ [Parameter] ],
    byref: false,
    type: null,
    nullable: false,
    body: Block {
      kind: 'block',
      loc: [Location],
      children: [Array],
      parent: [Circular *5]
    },
    attrGroups: [],
    parent: Program {
      kind: 'program',
      loc: [Location],
      children: [Circular *1],
      errors: [],
      comments: []
    }
  },
  Inline {
    kind: 'inline',
    loc: Location { source: null, start: [Position], end: [Position] },
    value: '  </body>\n</html>',
    raw: '\n  </body>\n</html>',
    parent: Program {
      kind: 'program',
      loc: [Location],
      children: [Circular *1],
      errors: [],
      comments: []
    }
  }
]
